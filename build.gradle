buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            url = 'https://jitpack.io'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.5-SNAPSHOT'
    }
}

repositories {
}

//https://repo.mumfrey.com/content/groups/public/com/mumfrey/liteloader/1.12.2-SNAPSHOT/
apply plugin: 'net.minecraftforge.gradle.liteloader'
apply plugin: 'org.spongepowered.mixin'

ext.configFile = file "gradle.properties"

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

group = 'xyz.crazyh'
version = project.mod_version
archivesBaseName = 'LiteModTemplate'

minecraft {
    // these values are defined in the gradle.properties file, so that this file does not need to be altered
    version = project.mcVersion
    mappings = project.mcpMappings
    runDir = "run"
}

dependencies {
    //some gradle magic needed here I guess
}

sourceSets {
    main {
        // Refmap declaration must match the refmap name specified in the json config
        ext.refMap = "mixins.example.refmap.json"
    }
}

mixin {
    // liteloader does not do runtime deobfuscation, so in production we use "notch names", mixin needs to know this
    defaultObfuscationEnv notch
}

litemod {
    json {
        name = config.mod_id
        displayName = config.mod_name
        mcversion = config.minecraft_version
        version = config.mod_version
        author = config.author

        // Uncomment any of the following lines and fill in your own details as required
        //requiredAPIs = [ 'someapi' ]
        //tweakClass = 'name.of.tweaker.here'
        dependsOn = ['malilib']
        mixinConfigs = [ 'mixins.' + config.mod_id + '.json' ]
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_version", project.config.mod_version
    inputs.property "minecraft_version", project.config.minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'mod_version': project.config.mod_version, 'minecraft_version': project.config.minecraft_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    // The litemod task above generates the litemod.json dynamically, you can replace it with a resource if you want more control
    from litemod.outputs
}
